CREATE TABLE IF NOT EXISTS PUBLIC.FILMS (
	FILM_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME VARCHAR_IGNORECASE(50) NOT NULL,
	DESCRIPTION VARCHAR_IGNORECASE NOT NULL,
	GENRE_ID INTEGER NOT NULL,
	RATING_ID INTEGER NOT NULL,
	RELEASE_DATE DATE NOT NULL,
	DURATION INTEGER NOT NULL,
	CONSTRAINT FILMS_FK PRIMARY KEY (GENRE_ID,GENRE_ID),
	CONSTRAINT FILMS_FK_1 PRIMARY KEY (RATING_ID,RATING_ID),
	CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
	CONSTRAINT FILMS_FK FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRES(GENRE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT FILMS_FK_1 FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATINGS(RATING_ID) ON DELETE RESTRICT ON UPDATE
	RESTRICT
);
CREATE INDEX FILMS_FK_1_INDEX_3 ON PUBLIC.FILMS (RATING_ID);
CREATE INDEX FILMS_FK_INDEX_3 ON PUBLIC.FILMS (GENRE_ID);
CREATE UNIQUE INDEX PRIMARY_KEY_3 ON PUBLIC.FILMS (FILM_ID);

CREATE TABLE IF NOT EXISTS PUBLIC.GENRES (
	GENRE_ID INTEGER NOT NULL AUTO_INCREMENT,
	GENRE VARCHAR_IGNORECASE,
	CONSTRAINT GENRES_PK PRIMARY KEY (GENRE_ID)
);
CREATE UNIQUE INDEX PRIMARY_KEY_7 ON PUBLIC.GENRES (GENRE_ID);

CREATE TABLE IF NOT EXISTS PUBLIC.RATINGS (
	RATING_ID INTEGER NOT NULL AUTO_INCREMENT,
	RATING VARCHAR_IGNORECASE NOT NULL,
	CONSTRAINT RATINGS_PK PRIMARY KEY (RATING_ID)
);
CREATE UNIQUE INDEX PRIMARY_KEY_65 ON PUBLIC.RATINGS (RATING_ID);

CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
	USER_ID INTEGER NOT NULL AUTO_INCREMENT,
	EMAIL VARCHAR_IGNORECASE(50),
	LOGIN VARCHAR_IGNORECASE(30) NOT NULL,
	NAME VARCHAR_IGNORECASE,
	BIRTHDAY DATE NOT NULL,
	CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);
CREATE UNIQUE INDEX PRIMARY_KEY_61 ON PUBLIC.USERS (USER_ID);

CREATE TABLE IF NOT EXISTS PUBLIC.USER_LIKES (
	USER_LIKES_ID INTEGER NOT NULL AUTO_INCREMENT,
	FILM_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	CONSTRAINT USER_LIKES_FK PRIMARY KEY (FILM_ID,FILM_ID),
	CONSTRAINT USER_LIKES_FK_1 PRIMARY KEY (USER_ID,USER_ID),
	CONSTRAINT USER_LIKES_PK PRIMARY KEY (USER_LIKES_ID),
	CONSTRAINT USER_LIKES_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) ON DELETE RESTRICT ON UPDATE
	RESTRICT,
	CONSTRAINT USER_LIKES_FK_1 FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE RESTRICT ON UPDATE
	RESTRICT
);
CREATE UNIQUE INDEX PRIMARY_KEY_C ON PUBLIC.USER_LIKES (USER_LIKES_ID);
CREATE INDEX USER_LIKES_FK_1_INDEX_C ON PUBLIC.USER_LIKES (USER_ID);
CREATE INDEX USER_LIKES_FK_INDEX_C ON PUBLIC.USER_LIKES (FILM_ID);

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDSHIP (
	FRIENDSHIP_ID INTEGER NOT NULL AUTO_INCREMENT,
	FRIEND_ONE_ID INTEGER NOT NULL,
	FRIEND_TWO_ID INTEGER NOT NULL,
	FRIENDSHIP_STATUS BOOLEAN NOT NULL,
	CONSTRAINT FRIENDSHIP_FK PRIMARY KEY (FRIEND_ONE_ID),
	CONSTRAINT FRIENDSHIP_FK_1 PRIMARY KEY (FRIEND_TWO_ID),
	CONSTRAINT FRIENDSHIP_PK PRIMARY KEY (FRIENDSHIP_ID),
	CONSTRAINT FRIENDSHIP_FK FOREIGN KEY (FRIEND_ONE_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE RESTRICT ON UPDATE
	RESTRICT,
	CONSTRAINT FRIENDSHIP_FK_1 FOREIGN KEY (FRIEND_TWO_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE RESTRICT ON UPDATE
	RESTRICT
);
CREATE INDEX FRIENDSHIP_FK_1_INDEX_B ON PUBLIC.FRIENDSHIP (FRIEND_TWO_ID);
CREATE INDEX FRIENDSHIP_FK_INDEX_B ON PUBLIC.FRIENDSHIP (FRIEND_ONE_ID);
CREATE UNIQUE INDEX PRIMARY_KEY_B ON PUBLIC.FRIENDSHIP (FRIENDSHIP_ID);